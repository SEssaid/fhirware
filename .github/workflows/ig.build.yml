name: IG build and publish

defaults:
  run:
    shell: bash

on:
  workflow_call:
    inputs:

      # branch/PR home repo
      owner-repo:
        type: string
        required: true
      ref:
        type: string
        required: true
#      depth:
#        type: number
#        required: true

      # build related
      ig-root:
        description: The relative path, in the repo, to the IG root folder. This folder is mounted to /ig in the Docker container.
        required: true
        type: string

      publisher-args:
        description: The parameters to pass to the publisher.jar. Keep in mind that the IG root folder is at /ig.
        required: true
        type: string

      docker-tag:
        description: "The Docker tag to use from: https://hub.docker.com/repository/docker/sessaid/ig-publisher/tags"
        required: true
        type: string

      # base for PR builds
      # this being set is an indicator of a PR build that should be merge-built as well if possible
#      try-merge:
#        description: if a merge with a base ref should be done. this is a string due to not being clear on boolean type
#        # TODO: See: https://github.com/actions/runner/issues/1483
#        type: string

      base-ref:
        type: string
#      pr-number:
#        type: string

      # publication related
      io-owner:
        description: The owner of the IO repo
        type: string

      io-repo:
        description: If set, it is a GitHub dedicated repository (repo name only) for publishing the IG's output.
        type: string

      io-branch:
        description: The branch to use for publishing the IG's output. gh-pages by default so it works on github.io
        type: string
        default: gh-pages

      io-path:
        description: "A path to publish under. If not set, a default is calculated. TODO: document this."
        type: string

    secrets:
#      token:
#        required: true
      io-token:
        required: true
jobs:
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout IG
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.owner-repo }}
          ref: ${{ inputs.ref }}
          path: ig-clone

      - name: Build IG branch
        run: |
          #set -x
          #env | sort
          #id
          cd ig-clone
          #cat .git/config
          #git status
          #ls -la
          echo Running IG build with inputs: '${{ toJSON(inputs) }}'
          #mkdir -p "${{inputs.ig-root}}/output"
          #echo hello branch build $(date) > "${GITHUB_WORKSPACE}/ig-clone/${{inputs.ig-root}}/output/index.html"
          docker pull "sessaid/ig-publisher:${{inputs.docker-tag}}"
          docker run --rm --user $(id -u):$(id -u) --volume "${GITHUB_WORKSPACE}/ig-clone/${{inputs.ig-root}}:/ig" "sessaid/ig-publisher:${{inputs.docker-tag}}"  ${{ inputs.publisher-args }}

      # Publish if requested
      - name: Checkout IO branch
        if: inputs.io-repo != ''
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.io-owner }}/${{ inputs.io-repo }}
          ref: ${{ inputs.io-branch }}
          path: io-clone
          token: ${{ secrets.io-token }}

      - name: Publish branch
        if: inputs.io-repo != ''
        run: |
          set -x
          cd io-clone
          #cat .git/config
          #git status
          #ls -la
          [[ -d "${{ inputs.io-path }}" ]] &&  rm -rf "${{ inputs.io-path }}"
          mkdir -p "${{ inputs.io-path }}"
          cp -ra "../ig-clone/${{inputs.ig-root}}/output"/* "${{ inputs.io-path }}"
          if [[ ! -f  "IG_BUILDS.md" ]]; then
            echo '# IG Builds  ' > IG_BUILDS.md
          fi
          { 
            cat IG_BUILDS.md |  grep -v '${{ inputs.io-path }}' ; 
            printf '%s  \n' "[${{ inputs.io-path }}](https://${{ inputs.io-owner }}.github.io/${{ inputs.io-repo }}/${{ inputs.io-path }}/index.html)";
          } | sort > IG_BUILDS.md.new
          mv -f IG_BUILDS.md.new IG_BUILDS.md

      - name: If merge
        if: inputs.base-ref != ''
        # try to merge and build again
        # TODO: try to optimize the full fetch
        run: |
          #set -x
          echo doing base merge and build
          cd ig-clone
          #git status
          #ls -la
          #ls -la ig/r4-ig-starter/output/
          git fetch --unshallow
          git clean -fdx
          git remote add upstream "https://github.com/${{ github.repository }}"
          #cat .git/config
          git fetch --all
          git checkout -b upstream-${{ inputs.base-ref }} --track  "upstream/${{ inputs.base-ref }}"
          if git merge "${{ inputs.ref }}"; then
            echo merge was successful
            #mkdir -p "${{inputs.ig-root}}/output"
            #echo hello merged branch build $(date) > "${{inputs.ig-root}}/output/index.html"
            who
            docker run --rm --user $(id -u):$(id -u) --volume "${GITHUB_WORKSPACE}/ig-clone/${{inputs.ig-root}}:/ig" "sessaid/ig-publisher:${{inputs.docker-tag}}"  ${{ inputs.publisher-args }}
          else
            echo merge has conflicts
          fi
          
      - name: Publish merged
        if: inputs.base-ref != '' && inputs.io-repo != ''
        run: |  
          #set -x
          cd io-clone
          [[ -d "${{ inputs.io-path }}--merged" ]] &&  rm -rf "${{ inputs.io-path }}--merged"
          mkdir -p "${{ inputs.io-path }}--merged"
          cp -ra "../ig-clone/${{inputs.ig-root}}/output"/* "${{ inputs.io-path }}--merged"
          { 
            cat IG_BUILDS.md;
            printf '%s  \n' "[${{ inputs.io-path }}-merged](https://${{ inputs.io-owner }}.github.io/${{ inputs.io-repo }}/${{ inputs.io-path }}--merged/index.html)";
          } | sort > IG_BUILDS.md.new
          mv -f IG_BUILDS.md.new IG_BUILDS.md

      - name: Push IO
        if: inputs.io-repo != ''
        run: |
          #set -x
          cd io-clone
          git add -A
          if [[ -z "$(git status --porcelain)" ]]; then
            echo NO changes
          else
            git config --global user.name 'Publisher IO'
            git config --global user.email 'shahim@essaid.com'
            git commit -m "IG: ${{ inputs.owner-repo }}, ref: ${{ inputs.ref }}  run_id: ${{ github.run_id }}, run_number: ${{ github.run_number }}, run_attempt: ${{ github.run_attempt }}"
            git push
          fi
